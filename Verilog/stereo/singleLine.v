// A single 1xLineWidth ram Should be generated by Xilinx or Altera
// toolset to make the proper blockram Currently being done via
// simulation for ease of use.

module singleLine ( 
	            clk,  // clock
	            addr, // address 
	            datain, // data input
	            re, // read enable
	            oData // output data
	            );
   
   parameter PIXEL_DEPTH = 9;
   parameter ADDR_WIDTH = 3;
   parameter RAM_DEPTH  = 1 << ADDR_WIDTH+1;
   
   output [PIXEL_DEPTH:0] oData;
   
   input                   clk;
   input [ADDR_WIDTH:0]  addr;
   input                   re;
   input [PIXEL_DEPTH:0]  datain;
   
   reg [PIXEL_DEPTH:0]    data_out;
   reg [PIXEL_DEPTH:0]    mem [0:RAM_DEPTH-1];
   
   assign oData = data_out;
   
   always @(posedge clk)
     begin : MEM_WRITE
	if(~re) begin
	   mem[addr] = datain;
	end
     end
   
   always @(posedge clk)
     begin : MEM_READ
	if(re) begin
	   data_out = mem[addr];
	end
     end

endmodule

module t_singleLine;
   parameter DATA_WIDTH = 10;
   parameter ADDR_WIDTH = 4;
   parameter RAM_DEPTH  = 1 << ADDR_WIDTH;

   // inputs
   reg [ADDR_WIDTH-1:0] addr;
   reg [DATA_WIDTH-1:0] datain;
   reg                  clock;
   reg                  re;

   // outputs
   wire [DATA_WIDTH-1:0] oData;

   // device
   singleLine DUT(.clk(clock),
                  .addr(addr),
                  .datain(datain),
                  .re(re),
                  .oData(oData) );
   
   initial clock <= 0;
   always #10 clock = ~clock;

   initial
   begin
      addr <= 0;
      datain <= 0;
      re <= 0;
   end

   always @(posedge clock)
     begin
        // writing
        if( addr < 2**ADDR_WIDTH-1 )
           begin
              addr <= addr + 1;
              datain <= datain + 1;
           end
        else 
          begin
             addr <= addr + 1;
             datain <= 0;
             re <= 1;
          end // else: !if( addr < 2**ADDR_WIDTH-1 )

        $monitor($time, ": addr: %x, in: %x, out: %x, read: %b\n",
                 addr, datain, oData, re);
        
     end
endmodule

